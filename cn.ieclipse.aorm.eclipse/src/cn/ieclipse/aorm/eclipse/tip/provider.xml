<dl class="attr">
        <dt><a name="auth"></a><code>android:authorities</code></dt>
        <dd>
        A list of one or more URI authorities that identify data offered by the content provider.
        Multiple authorities are listed by separating their names with a semicolon. 
        To avoid conflicts, authority names should use a Java-style naming convention 
        (such as <code>com.example.provider.cartoonprovider</code>).  Typically, it's the name
        of the <code><a href="#">ContentProvider</a></code> subclass that implements the provider
        <p>
            There is no default.  At least one authority must be specified.
        </p>
        </dd>

        <dt><a name="enabled"></a><code>android:enabled</code></dt>
        <dd>Whether or not the content provider can be instantiated by the system — 
        "<code>true</code>" if it can be, and "<code>false</code>" if not.  The default value 
        is "<code>true</code>".

        <p>
The <code><a href="#">&lt;application&gt;</a></code> element has its own 
<code><a href="#">enabled</a></code> attribute that applies to all 
application components, including content providers.  The 
<code><a href="#">&lt;application&gt;</a></code> and <code>&lt;provider&gt;</code> 
attributes must both be "<code>true</code>" (as they both
are by default) for the content provider to be enabled.  If either is 
"<code>false</code>", the provider is disabled; it cannot be instantiated.
</p></dd>

<dt><a name="exported"></a><code>android:exported</code></dt>
<dd>
    Whether the content provider is available for other applications to use:
    <ul> 
        <li>
            <code>true</code>: The provider is available to other applications. Any application can
            use the provider's content URI to access it, subject to the permissions specified for
            the provider.
        </li>
        <li>
            <code>false</code>: The provider is not available to other applications. Set 
            <code>android:exported="false"</code> to limit access to the provider to your
            applications. Only applications that have the same user ID (UID) as the provider will
            have access to it.
        </li>
    </ul>
    <p>
        The default value is <code>"true"</code> for applications that set either 
<code><a href="#">android:minSdkVersion</a></code>
        or 
<code><a href="#">android:targetSdkVersion</a></code> to 
        <code>"16"</code> or lower. For applications that
        set either of these attributes to <code>"17"</code> or higher, the default is 
        <code>"false"</code>.
    </p>
    <p>
        You can set <code>android:exported="false"</code> and still limit access to your
        provider by setting permissions with the 
   <code><a href="#">permission</a></code>
        attribute.
    </p>
</dd> 

<dt><a name="gprmsn"></a><code>android:grantUriPermissions</code></dt>
<dd>Whether or not those who ordinarily would not have permission to 
access the content provider's data can be granted permission to do so,
temporarily overcoming the restriction imposed by the
<code><a href="#">readPermission</a></code>,
<code><a href="#">writePermission</a></code>, and 
<code><a href="#">permission</a></code> attributes 
— 
"<code>true</code>" if permission can be granted, and "<code>false</code>" if not.  
If "<code>true</code>", permission can be granted to any of the content 
provider's data.  If "<code>false</code>", permission can be granted only 
to the data subsets listed in 
<code><a href="#">&lt;grant-uri-permission&gt;</a></code> subelements, 
if any.  The default value is "<code>false</code>".

<p>
Granting permission is a way of giving an application component one-time 
access to data protected by a permission.  For example, when an e-mail 
message contains an attachment, the mail application may call upon the 
appropriate viewer to open it, even though the viewer doesn't have general 
permission to look at all the content provider's data. 
</p>

<p>  
In such cases, permission is granted by 
<code><code><a href="#">FLAG_GRANT_READ_URI_PERMISSION</a></code></code> 
and <code><code><a href="#">FLAG_GRANT_WRITE_URI_PERMISSION</a></code></code> 
flags in the Intent object that activates the component.  For example, the 
mail application might put <code>FLAG_GRANT_READ_URI_PERMISSION</code> in the 
Intent passed to <code>Context.startActivity()</code>.  The permission is specific 
to the URI in the Intent.  
</p>

<p>
If you enable this feature, either by setting this attribute to "<code>true</code>"
or by defining <code><a href="#">&lt;grant-uri-permission&gt;</a></code> 
subelements, you must call 
<code><code><a href="#">Context.revokeUriPermission()</a></code></code> when a covered URI is deleted from 
the provider.
</p>

<p>
See also the <code><a href="#">&lt;grant-uri-permission&gt;</a></code>
element.
</p></dd>

<dt><a name="icon"></a><code>android:icon</code></dt>
<dd>An icon representing the content provider. 
This attribute must be set as a reference to a drawable resource containing 
the image definition.  If it is not set, the icon specified for the application 
as a whole is used instead (see the <code><a href="#">&lt;application&gt;</a></code> 
element's <code><a href="#">icon</a></code> attribute).</dd>

<dt><a name="init"></a><code>android:initOrder</code></dt>
<dd>The order in which the content provider should be instantiated, 
relative to other content providers hosted by the same process.  
When there are dependencies among content providers, setting this 
attribute for each of them ensures that they are created in the order 
required by those dependencies.  The value is a simple integer, 
with higher numbers being initialized first.</dd>

<dt><a name="label"></a><code>android:label</code></dt>
<dd>A user-readable label for the content provided.  
If this attribute is not set, the label set for the application as a whole is 
used instead (see the <code><a href="#">&lt;application&gt;</a></code> element's 
<code><a href="#">label</a></code> attribute).

<p>
The label should be set as a reference to a string resource, so that
it can be localized like other strings in the user interface.  
However, as a convenience while you're developing the application, 
it can also be set as a raw string.
</p></dd>

<dt><a name="multi"></a><code>android:multiprocess</code></dt>
<dd>Whether or not an instance of the content provider can be created in 
every client process — "<code>true</code>" if instances can run in multiple
processes, and "<code>false</code>" if not.  The default value is "<code>false</code>".

<p>
Normally, a content provider is instantiated in the process of the 
application that defined it.  However, if this flag is set to "<code>true</code>", 
the system can create an instance in every process where there's a client 
that wants to interact with it, thus avoiding the overhead of interprocess 
communication.
</p></dd>

<dt><a name="nm"></a><code>android:name</code></dt>
<dd>The name of the class that implements the content provider, a subclass of 
<code><a href="#">ContentProvider</a></code>.  This should be a fully qualified 
class name (such as, "<code>com.example.project.TransportationProvider</code>").  
However, as a shorthand, if the first character of the name is a period, 
it is appended to the package name specified in the 
<code><a href="#">&lt;manifest&gt;</a></code> element.

<p>
There is no default.  The name must be specified.
</p></dd>


<dt><a name="prmsn"></a><code>android:permission</code></dt>
<dd>The name of a permission that clients must have to read or write the
content provider's data.  This attribute is a convenient way of setting a 
single permission for both reading and writing.  However, the 
<code><a href="#">readPermission</a></code> and 
<code><a href="#">writePermission</a></code> attributes take precedence
over this one.  If the <code><a href="#">readPermission</a></code> 
attribute is also set, it controls access for querying the content provider.
And if the <code><a href="#">writePermission</a></code> attribute is set,
it controls access for modifying the provider's data.

<p>
For more information on permissions, see the 
<a href="#">Permissions</a> 
section in the introduction and a separate document, 
<a href="#">Security and
Permissions</a>.
</p></dd>

<dt><a name="proc"></a><code>android:process</code></dt>
<dd>The name of the process in which the content provider should run.  Normally, 
all components of an application run in the default process created for the 
application.  It has the same name as the application package.  The 
<code><a href="#">&lt;application&gt;</a></code> element's 
<code><a href="#">process</a></code> 
attribute can set a different 
default for all components.  But each component can override the default
with its own <code>process</code> attribute, allowing you to spread your 
application across multiple processes.

<p>
If the name assigned to this attribute begins with a colon (':'), a new 
process, private to the application, is created when it's needed and 
the activity runs in that process.
If the process name begins with a lowercase character, the activity will run 
in a global process of that name, provided that it has permission to do so.
This allows components in different applications to share a process, reducing 
resource usage.
</p></dd>

<dt><a name="rprmsn"></a><code>android:readPermission</code></dt>
<dd>A permission that clients must have to query the content provider.  
See also the <code><a href="#">permission</a></code> and 
<code><a href="#">writePermission</a></code> attributes.</dd>

<dt><a name="sync"></a><code>android:syncable</code></dt>
<dd>Whether or not the data under the content provider's control 
is to be synchronized with data on a server — "<code>true</code>" 
if it is to be synchronized, and "<code>false</code>" if not.</dd>

<dt><a name="wprmsn"></a><code>android:writePermission</code></dt>
<dd>A permission that clients must have to make changes to the data 
controlled by the content provider.  
See also the <code><a href="#">permission</a></code> and 
<code><a href="#">readPermission</a></code> attributes.</dd>

</dl>